CREATE DATABASE IF NOT EXISTS Company_Data;
USE Company_Data;
CREATE TABLE IF NOT EXISTS Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);
CREATE TABLE IF NOT EXISTS Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    order_date DATE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO Products (product_id, product_name, price) VALUES
(1, 'Laptop', 800.00),
(2, 'Smartphone', 500.00),
(3, 'Tablet', 300.00),
(4, 'Headphones', 100.00),
(5, 'Smartwatch', 200.00),
(6, 'Camera', 600.00),
(7, 'Printer', 150.00),
(8, 'Monitor', 250.00),
(9, 'Keyboard', 50.00),
(10, 'Mouse', 30.00);

INSERT INTO Orders (order_id, customer_id, product_id, quantity, order_date) VALUES
(101, 1, 1, 2, '2023-01-28'),
(102, 2, 2, 1, '2023-01-29'),
(103, 3, 3, 3, '2023-01-30'),
(104, 1, 4, 5, '2023-09-01'),
(105, 4, 1, 1, '2023-09-02'),
(106, 2, 5, 2, '2023-09-02'),
(107, 3, 2, 4, '2023-09-03'),
(108, 4, 4, 3, '2023-09-04'),
(109, 1, 3, 1, '2023-09-04'),
(110, 5, 5, 1, '2023-09-04'),
(111, 6, 6, 1, '2023-09-05'),
(112, 2, 7, 2, '2023-09-05'),
(113, 3, 8, 1, '2023-09-06'),
(114, 4, 9, 3, '2023-09-07'),
(115, 5, 10, 4, '2023-09-07'),
(116, 1, 1, 1, '2023-09-08'),
(117, 6, 2, 2, '2023-09-08'),
(118, 2, 3, 3, '2023-09-09'),
(119, 3, 4, 5, '2023-09-10'),
(120, 4, 5, 1, '2023-09-10'),
(121, 5, 6, 1, '2023-09-11'),
(122, 1, 7, 2, '2023-09-11'),
(123, 2, 8, 1, '2023-09-12'),
(124, 3, 9, 3, '2023-09-12'),
(125, 4, 10, 4, '2023-09-13'),
(126, 5, 1, 2, '2023-09-13'),
(127, 6, 2, 1, '2023-09-14'),
(128, 1, 3, 3, '2023-09-14'),
(129, 2, 4, 5, '2023-09-15'),
(130, 3, 5, 2, '2023-09-15');

SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;

-- 1)a):
SELECT product_id, sum(quantity) as total_quantity
FROM ORDERS
GROUP BY product_id;
/*
This query gives the total quantity that was ordered for each product.
Thus, from the results of this query, we can determine the most popular and the least popular products.
Here, we can see that Headphones have been ordered the most, 
while Camera and Monitor have been ordered the least number of times.
*/

-- 1)b):
SELECT * FROM ORDERS 
WHERE order_date BETWEEN '2023-09-8' AND '2023-09-15';
/*
This query gives us all the records from the orders table where the order date is within the last 7 days. 
This helps us determine the types of products and their ordered quantities during that range.
*/

-- 1)c):
SELECT ORDERS.order_id, PRODUCTS.product_id, PRODUCTS.product_name, (PRODUCTS.price*ORDERS.quantity) as total_sale_amount
FROM ORDERS
JOIN PRODUCTS
ON ORDERS.product_id = PRODUCTS.product_id
ORDER BY order_id;
/*
This query calculates the total price for each order. This can help us calculate the average order price.
Here, we can see that 2000 is the highest amount while 120 is the lowest. 
*/

-- 2)a):
SELECT PRODUCTS.product_id, PRODUCTS.product_name, sum(ORDERS.quantity) as total_quantity
FROM ORDERS
JOIN PRODUCTS
ON ORDERS.product_id = PRODUCTS.product_id
GROUP BY PRODUCTS.product_id, PRODUCTS.product_name
ORDER BY sum(ORDERS.quantity) DESC
LIMIT 3;
/*
Through this query, we can see that Headphones, Tablet and Mouse are the top 3 products for this company because they have been
ordered most frequently. 
*/

-- 2)b):
SELECT ORDERS.product_id, sum(ORDERS.quantity*PRODUCTS.price) as total_revenue
FROM ORDERS
JOIN PRODUCTS
ON ORDERS.product_id = PRODUCTS.product_id
GROUP BY ORDERS.product_id;
/*
This query gives the total revenuee generated by each product.
Laptops have generated the most revenue for the company since its total revenue is 4800.
On the other hand, mouse has generated the least revenue.
*/

-- 2)c):
SELECT * 
FROM PRODUCTS
WHERE product_id NOT IN
	(SELECT product_id FROM ORDERS);
/*
This query gives the products that were never ordered. Through the results of this query we can conclude that
each product was ordered atleast once.
*/
    
-- 3)a):
SELECT MONTH(order_date) as Purchase_Month, COUNT(order_id) as Monthly_Orders
FROM ORDERS
GROUP BY MONTH(order_date);
/*
This query gives us the quantity of products sold in each month.
We can see that 3 orders were placed in the month of January while 27 orders were placed in the month of September. 
Through this, we can clearly see that most orders are being placed in the month of September.
*/

-- 3)b):
SELECT * FROM ORDERS
WHERE DAYNAME(order_date) = 'Saturday' OR DAYNAME(order_date) = 'Sunday';
/*
This query lists all the orders that were placed on weekends.
*/

-- 4)a):
SELECT customer_id, COUNT(*) as frequency
FROM ORDERS
GROUP BY customer_id
HAVING COUNT(*)>5;
/*
This query lists the customers who have ordered from this company more than 7 times. 
The company might thus want to consider giving these customers special benefits so as to encourage them to 
continue buying from this company.
*/

-- 4)b):
SELECT customer_id, order_date
FROM ORDERS
WHERE order_date BETWEEN '2023-01-01' AND '2023-01-30';
/*
This query lists the customers who placed orders in the first 30 days of the year.
We can see that 3 customers have placed orders during this time.
*/

-- 4)c):
/*
The orders table can be optimized by indexing the product_id column.
This is because the product_id column will be used quite frequently in most queries.
Once an index is created for this column, SQL will be able to use this index to access a specific record.
Thus, the entire table will not have to be scanned every time that a query related to this column is run.
*/